{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Enterprise Tile Server",
  "Parameters": {
    "DevOpsBucket": {
      "Description": "Bucket containing resources for cloud init",
      "Type": "String",
      "Default": "devops.temp"
    },
    "TileServerResourcesBucket": {
      "Description": "Bucket prefix containing resources for Tile Server Resources",
      "Type": "String",
      "Default": "net-openwhere-temp"
    },
    "EnvironmentName": {
      "Description": "environment name",
      "Type": "String",
      "Default": "secdevops-001"
    },
    "InstanceType": {
      "Description": "Default type of EC2 instance to launch.",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "c1.xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge",
        "cr1.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair.",
      "Default" : "SecDevOps-001"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
     "PowerSave": {
      "Description": "Value for PowerSave tag (used to control nightly shut",
      "Type": "String",
      "Default": "devdas",
      "AllowedValues": [
        "alwaysup",
        "hibernate",
        "nightly",
        "self-managed",
        "devdas"
      ],
      "ConstraintDescription": "must be a valid PowerSave mode"
    },
    "SubnetId":{
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription" : "must be the ID of an existing Subnet.",
      "Default":"subnet-4fed0606"
    },
    "VPCId":{
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription" : "must be the ID of an existing VPC.",
      "Default":"vpc-9d781ffa"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "AMI": "ami-6d1c2007"
      }
    }
  },
  "Resources": {
    "InstanceRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/"
      }
    },
    "RolePolicies":{
      "Type":"AWS::IAM::Policy",
      "Properties":{
        "PolicyName":"S3Download",
        "PolicyDocument":{
          "Statement":[
            {
            "Effect": "Allow",
            "Action": [
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets"
            ],
            "Resource": "arn:aws:s3:::*"
            },
            {
              "Effect": "Allow",
              "Action": ["s3:ListBucket"],
              "Resource": ["arn:aws:s3:::nga-sandbox-dev-config-bucket"]
            },
            {
              "Action":[
                "s3:GetObject"
              ],
              "Effect":"Allow",
              "Resource":"arn:aws:s3:::nga-sandbox-dev-config-bucket/*"
            }
          ]
        },
        "Roles":[
          {
            "Ref":"InstanceRole"
          }
        ]
      }
    },
    "InstanceProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Path":"/",
        "Roles":[
          {
            "Ref":"InstanceRole"
          }
        ]
      }
    },
    "EntTileServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "KeyName": {"Ref": "KeyName"},
        "SubnetId": {"Ref":"SubnetId"},
        "SecurityGroupIds" : [{ "Fn::GetAtt" : [ "EntTileServerSecurityGroup", "GroupId" ] }],
        "InstanceType": {"Ref": "InstanceType"},
        "IamInstanceProfile":{ "Ref":"InstanceProfile"},
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex",
                "\n",
                "whoami",
                "\n",
                "yum -y update",
                "\n",
                "yum -y install epel-release",
                "\n",
                "yum -y install python",
                "\n",
                "yum -y install python-pip",
                "\n",
                "yum install -y tomcat",
                "\n",
                "yum install -y tomcat-webapps tomcat-docs-webapp tomcat-admin-webapps",
                "\n",
                "pip install awscli --upgrade --user",
                "\n",
                "mkdir /var/lib/tomcat/webapps/nrtltestserver",
                "\n",
                "/root/.local/bin/aws s3 cp s3://nga-sandbox-dev-config-bucket/ent-tile-server-config/ /var/lib/tomcat/webapps/nrtltestserver/ --recursive",
                "\n",
                "systemctl start tomcat",
                "\n",
                "systemctl enable tomcat",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "EntTileServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access via port 8080 locked down to the ELB and SSH access",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    }
  },
  "Outputs" : {
    "InstanceId" : {
      "Description" : "InstanceId of the newly created EC2 instance",
      "Value" : { "Ref" : "EntTileServerInstance" }
    },
    "AZ" : {
      "Description" : "Availability Zone of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EntTileServerInstance", "AvailabilityZone" ] }
    },
    "PublicDNS" : {
      "Description" : "Public DNSName of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EntTileServerInstance", "PublicDnsName" ] }
    },
    "PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EntTileServerInstance", "PublicIp" ] }
    }
  }
}